<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:viewer="com.esri.viewer.*"
				   layout="absolute"
				   widgetConfigLoaded="init()" xmlns:components="com.esri.viewer.components.*" xmlns:PDA="widgets.PDA.*">
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace viewer "com.esri.viewer.*";
		@namespace components "com.esri.viewer.components.*";
		@namespace PDA "widgets.PDA.*";
		
		global
		{
			font-family:"宋体";
		}
		
		mx|DataGrid
		{
			alternatingItemColors: #EFF3FA, #FFFFFF;
			verticalGridLineColor: #696969;
			horizontal-grid-lines:false;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.events.QueryEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			private const ICON_URL:String = "assets/images/";
			private var servletcontext:String;
			[Bindable]
			private var xcNum:Number = 0;
			[Bindable]
			private var wzNum:Number = 0;
			private var graphicsLayer:GraphicsLayer = new GraphicsLayer();
			private var timer:Timer;
			private var timerHis:Timer;
			[Bindable]
			private var xcArray:Array = null;
			[Bindable]
			private var wzArray:Array = null;
			
			[Bindable]
			private var count:int=1;
			[Bindable]
			private var pagesize:int=1;
			private var isxc:Boolean=true;
			private var movex:Number;
			private var movey:Number;
			private var fsdxserver:String;
			private var xcwhere:String = 'isread = 0';  //未读   已读条件
			private var wzwhere:String = 'isread = 0';  //未读   已读标识
			[Bindable]
			private var wd_xc:String = "0"; //未读总数
			[Bindable]
			private var wd_wz:String = "0"; //未读总数
			private function init():void
			{
				servletcontext = this.configData.configXML.servletcontext;
				this.map.addLayer(graphicsLayer);
				getCount();
				getFyCount();
//				getSBData();
//				getWZData();
				
				if(configXML)
				{
					movex=configXML.movex;
					movey=configXML.movey;
					fsdxserver=configXML.fsdxSERVICE;
				}
//								timerHis=new Timer(2000);
								timer=new Timer(40000);
								timer.addEventListener(TimerEvent.TIMER, onTimer);
								timer.start();
//								timerHis.addEventListener(TimerEvent.TIMER, onTimerHis);
			}
			
			private function onTimer(event:TimerEvent):void
			{
				getCount();
				if(isxc)
				{
					getfySBData();
				}
				else
				{
					getfyWZData();
				}
			}
			
//			protected function getSBData():void
//			{
//				// TODO Auto-generated method stub
//				var httpservice:HTTPService = new HTTPService;
//				httpservice.url = servletcontext + "/gis/StatisticServlet";
//				httpservice.addEventListener(ResultEvent.RESULT,resultHandler);
//				httpservice.method = "POST";
//				var param:Object = new Object;
//				param.s = "select 'xc' lx, t1.id,t2.mobile, t1.bh, to_char(t1.sj,'yyyy-mm-dd') sj, t1.ycqkmc, t1.yzcd, t1.ycqkbw, t1.dlwz, t1.ssxmgc, t1.tzbhqdfw, t1.tzbhzdfw, t1.gcbhqdfw, t1.gcbhzdfw, t1.ycdddmjgxs, t1.ms, t1.yyfx, t1.jy, t1.xdy, t1.xdzz, t1.sbsy, t1.fkyj,t1.qy,t1.hd, t1.sfcl,t2.loginname,t1.x,t1.y, t1.isread from tab_gps_rcxcywb t1, (select id, mobile,loginname from sys_userinfo where ispdauser = 1 ) t2 where t1.sfcl = 'false' " + xcwhere + " and t1.userid = t2.id order by sbsy desc";
//				httpservice.send(param);
//			}
//			
			protected function getfySBData():void
			{
				// TODO Auto-generated method stub
				var httpservice:HTTPService = new HTTPService;
				httpservice.url = servletcontext + "/gis/StatisticServlet";
				httpservice.addEventListener(ResultEvent.RESULT,fyresultHandler);
				httpservice.method = "POST";
				var param:Object = new Object;
				param.s = "SELECT * FROM (SELECT a.*, ROWNUM rn "+
					" FROM (select 'xc' lx, t1.id, t2.mobile,t1.bh, to_char(t1.sj,'yyyy-mm-dd') sj, t1.ycqkmc, t1.yzcd, t1.ycqkbw, t1.dlwz, t1.ssxmgc, t1.tzbhqdfw, t1.tzbhzdfw, t1.gcbhqdfw, t1.gcbhzdfw, t1.ycdddmjgxs, t1.ms, t1.yyfx, t1.jy, t1.xdy, t1.xdzz, t1.sbsy, t1.fkyj,t1.qy,t1.hd, t1.sfcl,t2.loginname,t1.x,t1.y, t1.isread  from tab_gps_rcxcywb t1, (select id, mobile,loginname from sys_userinfo where ispdauser = 1 ) t2 where " + xcwhere + " and t1.userid = t2.id order by sbsy desc) a"+
					" WHERE ROWNUM <= "+pagesize*20+") WHERE rn >= "+((pagesize-1)*20+1);
				httpservice.send(param);
			}
			
			private function getfyWZData():void
			{
				var http:HTTPService = new HTTPService;
				http.url = servletcontext + "/gis/StatisticServlet";
				http.addEventListener(ResultEvent.RESULT,fywzResultHandler);
				http.method = "POST";
				var p:Object = new Object;
				p.s = "SELECT *"+
					"  FROM (SELECT a.*, ROWNUM rn"+
					"  FROM (select 'xc' lx, t1.id, t2.mobile,t1.bh, to_char(t1.sj,'yyyy-mm-dd') sj, t1.ycqkmc, t1.yzcd, t1.ycqkbw, t1.dlwz, t1.ssxmgc, t1.tzbhqdfw, t1.tzbhzdfw, t1.gcbhqdfw, t1.gcbhzdfw, t1.ycdddmjgxs, t1.ms, t1.yyfx, t1.jy, t1.xdy, t1.xdzz, t1.sbsy, t1.fkyj,t1.qy,t1.hd, t1.sfcl,t2.loginname,t1.x,t1.y, t1.isread  from tab_gps_rcxcwzbg t1, (select id, mobile,loginname from sys_userinfo where ispdauser = 1 ) t2 where " + wzwhere + "  and t1.userid = t2.id order by sbsy desc) a"+
					"  WHERE ROWNUM <= "+pagesize*20+") WHERE rn >= "+((pagesize-1)*20+1);
				http.send(p);
			}
//			private function getWZData():void
//			{
//				var http:HTTPService = new HTTPService;
//				http.url = servletcontext + "/gis/StatisticServlet";
//				http.addEventListener(ResultEvent.RESULT,wzResultHandler);
//				http.method = "POST";
//				var p:Object = new Object;
//				p.s = "select 'wz' lx, t1.id,t2.mobile, t1.bh, to_char(t1.sj,'yyyy-mm-dd') sj, t1.ycqkmc, t1.yzcd, t1.ycqkbw, t1.dlwz, t1.ssxmgc, t1.tzbhqdfw, t1.tzbhzdfw, t1.gcbhqdfw, t1.gcbhzdfw, t1.ycdddmjgxs, t1.ms, t1.yyfx, t1.jy, t1.xdy, t1.xdzz, t1.sbsy, t1.fkyj, t1.qy, t1.hd,t1.sfcl,t2.loginname,t1.x,t1.y, t1.isread  from tab_gps_rcxcwzbg t1, (select id, mobile,loginname from sys_userinfo where ispdauser = 1 ) t2 where t1.sfcl = 'false'" + wzwhere + "  and t1.userid = t2.id order by sbsy desc";
//				http.send(p);
//			}
			
			private function resultHandler(event:ResultEvent):void
			{
//				if(event.result==null) return;
//				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
//				if(jsonObject==null) return;
//				var jsonValues:Array = jsonObject["values"] as Array;
//				xcNum = jsonValues.length;
//				if(isxc)
//				{
//					count=xcNum/20+1;
//					pagecount.text="/"+count;
//					pagesize=1;
//					getfySBData();
//				}
				//				xcArray = jsonValues;
			}
			private function fyresultHandler(event:ResultEvent):void
			{
				if(event.result==null) return;
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				if(jsonObject==null) return;
				var jsonValues:Array = jsonObject["values"] as Array;
				//				xcNum = jsonValues.length;
				xcArray = jsonValues;
			}
			private function fywzResultHandler(event:ResultEvent):void
			{
				if(event.result==null) return;
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				if(jsonObject==null) return;
				var jsonValues:Array = jsonObject["values"] as Array;
				//				wzNum = jsonValues.length;
				wzArray = jsonValues;
			}
//			private function wzResultHandler(event:ResultEvent):void
//			{
//				if(event.result==null) return;
//				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
//				if(jsonObject==null) return;
//				var jsonValues:Array = jsonObject["values"] as Array;
//				wzNum = jsonValues.length;
//				if(!isxc)
//				{
//					count=wzNum/20+1;
//					pagecount.text="/"+count;
//					pagesize=1;
//					getfyWZData();
//				}
//				//				wzArray = jsonValues;
//			}
			
			protected function linkbutton1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
//				getSBData();
				getCount();
				getFyCount();
//				getWZData();
			}
			
			protected function wTemplate_closedHandler(event:Event):void
			{
				
				if(infoPupop!=null)
				{   
					if(!iscolse)
					{
						this.map.removeChild(infoPupop);
						iscolse=true;
					}
				}
				graphicsLayer.clear(); 
			}
			
			protected function tabnavigator1_changeHandler(event:IndexChangedEvent):void
			{
				// TODO Auto-generated method stub
				if(event.newIndex == 1)
				{
					//					getWZData();
					isxc=false;
					count=wzNum/20+1;
					pagecount.text="/"+count;
					pagesize=1;
					getfyWZData();
				}
				else
				{
					count=xcNum/20+1;
					pagecount.text="/"+count;
					pagesize=1;
					getfySBData();
					isxc=true;
				}
				
			}
			private var sel:Object;
			private var infoPupop:bginfoPopup=null;
			private var iscolse:Boolean=true;
			protected function resoultData_ClickHandler(event:MouseEvent):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				// TODO Auto-generated method stub
				if(grid.selectedItem == null) return;
				sel=grid.selectedItem;
				graphicsLayer.clear();
				if(infoPupop!=null)
				{   
					if(!iscolse)
					{
						this.map.removeChild(infoPupop);
						iscolse=true;
					}
				}
				if(sel.x!=0)
				{
					var symbol:PictureMarkerSymbol=new PictureMarkerSymbol(ICON_URL + "i_pin.png",40,40,20,20);
					var pt:MapPoint = new MapPoint();
					pt.x=parseFloat(sel.x)+movex;
					pt.y=parseFloat(sel.y)+movey;
					var g:Graphic=new Graphic(pt,symbol,sel);
					graphicsLayer.add(g);
					g.addEventListener(MouseEvent.CLICK, click);
					this.map.centerAt(pt);
				}
			}
			private function click(event:MouseEvent):void
			{
				if(infoPupop!=null)
				{   
					if(!iscolse)
					{
						this.map.removeChild(infoPupop);
						iscolse=true;
					}
				}
				
				infoPupop= new bginfoPopup;
				infoPupop.map = this.map;
				//				infoPupop.name="PDA" + pdaResult.title;
				this.map.addChild(infoPupop);
				infoPupop.popcol.addEventListener(MouseEvent.CLICK, closeclick);
				infoPupop.infoData = sel;
				infoPupop.fsdxserver=fsdxserver;
				infoPupop.servletcontext=this.servletcontext;
				iscolse=false;
				
			}
			private function closeclick(event:MouseEvent):void
			{
				
				this.map.removeChild(infoPupop);
				iscolse=true;
			}
			protected function resoultData_doubleClickHandler(event:MouseEvent):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				// TODO Auto-generated method stub
				if(grid.selectedItem == null) return;
				var form:RCSBFormWindow =PopUpManager.createPopUp(this.parentApplication.parent,RCSBFormWindow,false) as RCSBFormWindow;
				form.servletContent = this.servletcontext;
				form.progressid = grid.selectedItem;
				form.fsdxserver=fsdxserver;
				form.addEventListener("NEWCLOSE", closeHandler);
				PopUpManager.centerPopUp(form);
				
				var httpservice:HTTPService = new HTTPService;
				httpservice.url = servletcontext + "/gis/StatisticServlet";
				httpservice.addEventListener(ResultEvent.RESULT,updateHandler);
//				httpservice.addEventListener(FaultEvent.FAULT,null);
				httpservice.method = "POST";
				var param:Object = new Object;
				if(isxc)
				{
					param.s = "begin update tab_gps_rcxcywb set isread = 1 where id=" + grid.selectedItem.id +";commit; end;";
				}
				else
				{
					param.s = "begin update tab_gps_rcxcwzbg set isread = 1 where id=" + grid.selectedItem.id+";commit; end;";
				}
				httpservice.send(param);
			}
			
			private function updateHandler(event:ResultEvent):void
			{
				getCount();
				getFyCount();
//				getWZData();
			}
			private function closeHandler(event:Event):void
			{
				getCount();
				getFyCount();
//				getWZData();
				//				Alert.show("发送成功");
				
			}
			private function firstpage():void
			{
				if(isxc)
				{
					pagesize=1;
					getfySBData();
				}
				else
				{
					pagesize=1;
					getfyWZData();
				}
			}
			private function propage():void
			{
				if(isxc)
				{
					pagesize=pagesize-1;
					getfySBData();
				}
				else
				{
					pagesize=pagesize-1;
					getfyWZData();
				}
			}
			private function gopage():void
			{
				if(parseInt(inputpage.text)>count)
				{
					return;
				}
				
				if(isxc)
				{
					pagesize=parseInt(inputpage.text);
					getfySBData();
				}
				else
				{
					pagesize=parseInt(inputpage.text);
					getfyWZData();
				}
			}
			private function nextpage():void
			{
				if(isxc)
				{
					pagesize=pagesize+1;
					getfySBData();
				}
				else
				{
					pagesize=pagesize+1;
					getfyWZData();
				}
			}
			private function lastpage():void
			{
				if(isxc)
				{
					pagesize=count;
					getfySBData();
				}
				else
				{
					pagesize=count;
					getfyWZData();
				}
				
			}
			protected function tabnavigator1_creationCompleteHandler(event:FlexEvent):void
			{
				//				getSBData();
				//				getWZData();
			}
			

			protected function wz_itemClickHandler(event:ItemClickEvent):void
			{
				// TODO Auto-generated method stub
				if(event.index == 0)
				{
					wzwhere = 'isread = 0';
				}
				else if(event.index == 1)
				{
					wzwhere = 'isread = 1';
				}
//				getCount();
				getFyCount();
//				getWZData();
			}


			protected function xc_itemClickHandler(event:ItemClickEvent):void
			{
				// TODO Auto-generated method stub
				if(event.index == 0)
				{
					xcwhere = 'isread = 0';
				}
				else if(event.index == 1)
				{
					xcwhere = 'isread = 1';
				}
//				getCount();
				getFyCount();
//				getWZData();
			}

			private function getCount():void
			{
				var httpservice:HTTPService = new HTTPService;
				httpservice.url = servletcontext + "/gis/StatisticServlet";
				httpservice.addEventListener(ResultEvent.RESULT,CountResultHandler);
				httpservice.method = "POST";
				var param:Object = new Object;
				param.s = "select * from VIEW_GIS_WC_COUNT";
				httpservice.send(param);
			}
			
			private function CountResultHandler(event:ResultEvent):void
			{
				if(event.result==null) return;
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				if(jsonObject==null) return;
				var jsonValues:Array = jsonObject["values"] as Array;
				this.wd_xc = jsonValues[0].n;
				this.wd_wz = jsonValues[1].n;
				
//				xcNum = Number(jsonValues[0].n);
//				wzNum = Number(jsonValues[1].n);
//				if(isxc)
//				{
//					count=xcNum/20+1;
//					pagecount.text="/"+count;
//					pagesize=1;
//					getfySBData();
//				}
//				else
//				{
//					count=wzNum/20+1;
//					pagecount.text="/"+count;
//					pagesize=1;
//					getfyWZData();
//				}
			}
			
			private function getFyCount():void
			{
				var httpservice:HTTPService = new HTTPService;
				httpservice.url = servletcontext + "/gis/StatisticServlet";
				httpservice.addEventListener(ResultEvent.RESULT,FyCountResultHandler);
				httpservice.method = "POST";
				var param:Object = new Object;
				param.s =  "select count(1) n from tab_gps_rcxcywb where " + this.xcwhere
				+" union all "
				+" select count(1) from tab_gps_rcxcwzbg where " + this.wzwhere;
				httpservice.send(param);
			}
			
			private function FyCountResultHandler(event:ResultEvent):void  //分页总数
			{
				if(event.result==null) return;
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				if(jsonObject==null) return;
				var jsonValues:Array = jsonObject["values"] as Array;
				xcNum = Number(jsonValues[0].n);
				wzNum = Number(jsonValues[1].n);
				if(isxc)
				{
					count=xcNum/20+1;
					pagecount.text="/"+count;
					pagesize=1;
					getfySBData();
				}
				else
				{
					count=wzNum/20+1;
					pagecount.text="/"+count;
					pagesize=1;
					getfyWZData();
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Move3D id="moveEffect"
				  xFrom="-100" xTo="100" xBy="400" 
				  zFrom="-100" zBy="200" zTo="0"
				  repeatBehavior="reverse" />
	</fx:Declarations>
	<viewer:WidgetTemplate id="wTemplate"
						   width="420" height="350" closed="wTemplate_closedHandler(event)">
		<s:Group id="XCSB"
				 width="100%" height="100%"
				 visible="true"
				 >
			<s:VGroup width="100%" height="100%">
				<s:VGroup verticalAlign="middle">
					<s:Label paddingLeft="5" text="{'您有未读业务:巡查共'+wd_xc + '条,违章共' + wd_wz + '条'}" fontWeight="bold" />
					<!--<mx:LinkButton icon="@Embed('assets/images/update.png')" label="刷新" click="linkbutton1_clickHandler(event)"/>
					<mx:LinkButton icon="@Embed('assets/images/update.png')" label="刷新" click="linkbutton1_clickHandler(event)"/>
					<mx:LinkButton icon="@Embed('assets/images/update.png')" label="刷新" click="linkbutton1_clickHandler(event)"/>-->
				</s:VGroup>
				<mx:TabNavigator width="100%" paddingTop="0"  height="100%" change="tabnavigator1_changeHandler(event)" creationComplete="tabnavigator1_creationCompleteHandler(event)" >
					<s:NavigatorContent width="100%" height="100%" label="{'巡查上报'}">
						<s:VGroup width="100%" height="100%" gap="0">
						<mx:LinkBar labelField="label" iconField="icon" itemClick="xc_itemClickHandler(event)">
							<mx:dataProvider>
								<mx:ArrayList>
									<!--<fx:Object icon="@Embed('assets/images/email_open_image.png')" label="全部"/>-->
									<fx:Object icon="@Embed('assets/images/email.png')" label="未读"/>
									<fx:Object icon="@Embed('assets/images/email_open.png')" label="已读"/>
									<fx:Object icon="@Embed('assets/images/update.png')" label="刷新"/>
								</mx:ArrayList>
							</mx:dataProvider>
						</mx:LinkBar>
						<mx:DataGrid id="rcDataGrid" dataProvider="{this.xcArray}" paddingTop="0" width="100%" height="100%" alternatingItemColors="[#FFFFFF,#DFF0F8]" doubleClickEnabled="true" click="resoultData_ClickHandler(event)" doubleClick="resoultData_doubleClickHandler(event)">
			
							<mx:columns>
								<mx:DataGridColumn headerText="编号" dataField="bh" width="65">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.bh}"  />
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn headerText="异常情况名称" dataField="ycqkmc">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.ycqkmc}"/>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn headerText="发送时间" dataField="sbsy" width="120">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.sbsy}"/>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn headerText="巡查员" dataField="xdy" width="60">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.xdy}"/>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
							</mx:columns>
						</mx:DataGrid>
						</s:VGroup>
					</s:NavigatorContent>	
					<s:NavigatorContent  width="100%" height="100%" label="{'违章上报'}">
						<s:VGroup width="100%" height="100%" gap="0">
							<mx:LinkBar labelField="label" iconField="icon" itemClick="wz_itemClickHandler(event)">
								<mx:dataProvider>
									<mx:ArrayList>
										<!--<fx:Object icon="@Embed('assets/images/email_open_image.png')" label="全部"/>-->
										<fx:Object icon="@Embed('assets/images/email.png')" label="未读"/>
										<fx:Object icon="@Embed('assets/images/email_open.png')" label="已读"/>
										<fx:Object icon="@Embed('assets/images/update.png')" label="刷新"/>
									</mx:ArrayList>
								</mx:dataProvider>
							</mx:LinkBar>
						<mx:DataGrid id="wzDataGrid" paddingTop="0"  dataProvider="{this.wzArray}" width="100%" height="100%" alternatingItemColors="[#FFFFFF,#DFF0F8]" doubleClickEnabled="true"  click="resoultData_ClickHandler(event)" doubleClick="resoultData_doubleClickHandler(event)">
							<mx:columns>
								<mx:DataGridColumn headerText="编号" dataField="bh" width="65">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.bh}"/>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn headerText="异常情况名称" dataField="ycqkmc">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.ycqkmc}"/>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn headerText="发送时间" dataField="sbsy" width="120">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.sbsy}"/>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
								<mx:DataGridColumn headerText="巡查员" dataField="xdy" width="60">
									<mx:itemRenderer>
										<fx:Component>
											<mx:Label fontWeight="{data.isread == '0'? 'bold':'normal'}" text="{data.xdy}"/>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
							</mx:columns>
						</mx:DataGrid>
						</s:VGroup>
					</s:NavigatorContent>	
				</mx:TabNavigator>
				<s:HGroup verticalAlign="middle" horizontalAlign="right" width="100%" height="30">
					<s:Button label="首页" width="50" height="20" click="firstpage()" enabled="{count>1?true:false}"/>
					<s:Button label="上一页" width="60" height="20" click="propage()" enabled="{pagesize>1?true:false}"/>	
					<s:TextInput id="inputpage" restrict="0-9" width="20" height="20" text="{pagesize}"/>
					<s:Label id="pagecount" text="/20" width="20" height="10" top="15"/>
					<s:Button label="跳页" width="50" height="20" click="gopage()" enabled="{count>1?true:false}"/>
					<s:Button label="下一页" width="60" height="20" click="nextpage()" enabled="{count>pagesize?true:false}"/>	
					<s:Button label="末页" width="50" height="20" click="lastpage()" enabled="{count>1?true:false}"/>	
					
				</s:HGroup>
				
			</s:VGroup>
		</s:Group>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>