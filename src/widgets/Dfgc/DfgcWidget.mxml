<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:esri="http://www.esri.com/2008/ags"
					xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:mxeffects="com.adobe.ac.mxeffects.*"
					xmlns:flash="flash.text.*"
					xmlns:viewer="com.esri.viewer.*"
					xmlns:widgets="widgets.*"
					xmlns:components="com.esri.viewer.components.*"
					xmlns:Dfgc="widgets.Dfgc.*"
					x="450" y="400"
					widgetConfigLoaded="init()" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<viewer:states>
		
		<s:State name="gcbg"/>
		<s:State name="gcd"/>
		<s:State name="main"/>
	</viewer:states>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace esri "http://www.esri.com/2008/ags";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace mxeffects "com.adobe.ac.mxeffects.*";
		@namespace flash "flash.text.*";
		@namespace viewer "com.esri.viewer.*";
		@namespace widgets "widgets.*";
		
		.formLabelStyle {
			vertical-align:middle;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.events.QueryEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			
			import flash.utils.flash_proxy;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.HTTPService;
			
			import spark.components.supportClasses.ItemRenderer;
			
			[Bindable] 
			public var years:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var GcbgAL:ArrayList; 
			[Bindable]
			private var dfbg:Dfgc; 
			[Bindable]
			private var dfdd:Dfgc; 
			[Bindable]
			private var gcdiduanAL:ArrayList; 
			[Bindable]
			private var showedit:Boolean; 
			[Bindable]
			private var ddshowedit:Boolean; 
			[Bindable]
			private var gcbgLabel:String;
			[Bindable]
			private var dianarray:Array;
			[Bindable]
			private var newdiduanlist:Array;
		
			[Bindable]
			private var moduleAC:ArrayCollection;
			private var choosegc:ArrayList;
			private var gcdLabel:String;
			private var servletcontext:String;
			private const ICON_URL:String = "assets/images/";
		    private var addstatus:int=0;
			private var selectitem:Object;
			private var oneselectitem:Object;
			private var inputdh:String;
			private var inputtbzh:String;
			private var resaddid:ArrayList; 
			private var form:Dfgctb =null;
			private var ddcl:DfgcDdcl=null;
			private var layerid:String;
			private var extent:String="";
			private var graphicsLayer:GraphicsLayer;
			public function init():void
			{
				try{
					
					showedit=false;
					choosegc=new ArrayList();
				GcbgAL=new ArrayList();
				resaddid=new ArrayList();
				gcdiduanAL=new ArrayList();
				newdiduanlist=new Array();
				graphicsLayer=new GraphicsLayer();
				map.addLayer(graphicsLayer);
				var moduleList:XMLList=configXML..module;
				moduleAC=new ArrayCollection();
				for (var i:Number=0; i < moduleList.length(); i++)
				{
					var moduleid:String=moduleList[i].@id;
					var icon:String=moduleList[i].@icon;
					var title:String=moduleList[i].@title;
					var display:String=moduleList[i];
					
					if (display == "true")
					{
						var modulemark:Object={icon: icon, title: title, display: display}
						moduleAC.addItem(modulemark);
					}
				}
				servletcontext = this.configData.configXML.servletcontext;
				gcbgLabel=configXML.labels.gcbglabel || "观测报告";
				gcdLabel=configXML.labels.gcdlabel || "观测点";
				layerid=configXML.QueryLayer.layerid || "";
//				wTemplate.addTitlebarButton(ICON_URL + "i_home.png", "主菜单", showMain);
				wTemplate.addTitlebarButton(ICON_URL + "statistics.png", gcbgLabel, gcbglod,false);
//				wTemplate.addTitlebarButton(ICON_URL + "i_pin2.png", gcdLabel, gcdlod,false);
				addgcbg();
			}
			catch( e:Error)
			{
				Alert.show(e.toString());
			}
				
				
			}
			private function clickMoudel(event:Event):void
			{
				var modulemark:Object=event.currentTarget.infoData;
				if (modulemark.title == "观测报告")
				{
					this.currentState = "gcbg";
					wTemplate.selectedTitlebarButtonIndex = 2;
					addgcbg();
				}
//				else if (modulemark.title == "观测堤段")
//				{
//					this.currentState = "gcd";
//					wTemplate.selectedTitlebarButtonIndex = 3;
//					addgcdd();
//				}
				
				
			}
			private function showMain():void
			{
				this.currentState = "main";
				wTemplate.selectedTitlebarButtonIndex = 1; // used to indicate selected titlebar button when automatically switching state
			}
			private function addgcbg():void
			{
				var httpservice:HTTPService = new HTTPService;
				httpservice.url= servletcontext + "/dfgc/gccxServlet";
				httpservice.method = "POST";
				httpservice.resultFormat = "text";
				var params:URLVariables = new URLVariables();                               
				params.sty = "gcbg"; 
				httpservice.addEventListener(ResultEvent.RESULT,lodhandler);
				httpservice.send(params);
			}
			
			private function lodhandler(event:ResultEvent):void
			{
				GcbgAL.removeAll();
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				
				var jsonValues:Array = jsonObject["values"] as Array;
				if(jsonValues==null) return; 
				var colunms:Array = new Array;
				for(var i:int = 0;i<jsonValues.length;i++)
				{ 
					var   dfbgcon:Dfgc=new Dfgc();
					dfbgcon.name = jsonValues[i].name as String;
					dfbgcon.id = jsonValues[i].id as String;
					dfbgcon.years = jsonValues[i].years as String;
					dfbgcon.gcyf = jsonValues[i].gcyf as String;
					dfbgcon.bgbh = jsonValues[i].bgbh as String;
					dfbgcon.gcdd = jsonValues[i].gcdd as String;
					dfbgcon.gcmc = jsonValues[i].gcmc as String;
					dfbgcon.times = jsonValues[i].times as String;
					dfbgcon.gcsj =jsonValues[i].years+"年" +jsonValues[i].gcyf+"月";
					GcbgAL.addItem(dfbgcon);
					
				}	
			}
			private function gcbglod():void
			{
				this.currentState = "gcbg";
				wTemplate.selectedTitlebarButtonIndex = 2;
				addgcbg();
			}
			
			private function showgcbg(event:Event):void
			{    addstatus=3;
				bglist.visible=false;
				bgcontext.visible=true;
//				bgedit.visible=true;
				dfbg=ItemRenderer(event.target).data as Dfgc;
				var httpservice:HTTPService = new HTTPService;
				httpservice.url= servletcontext + "/dfgc/gccxServlet";
				httpservice.method = "POST";
				httpservice.resultFormat = "text";
				var params:URLVariables = new URLVariables();                               
				params.sty = "gcgc"; 
				params.id = dfbg.id; 
				httpservice.addEventListener(ResultEvent.RESULT,lodgchandler);
				httpservice.send(params);
				
				
			}
			
			private function lodgchandler(event:ResultEvent):void
			{    newdiduanlist=new Array();
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
//				dianarray= jsonObject["values"] as Array;
				newdiduanlist=jsonObject["values"] as Array;
				
			}
			private function removegcbg(event:Event):void
			{
				
			}
			
			
			private function lodgcdian():void
			{
				var httpservice:HTTPService = new HTTPService;
				httpservice.url= servletcontext + "/dfgc/gccxServlet";
				httpservice.method = "POST";
				httpservice.resultFormat = "text";
				var params:URLVariables = new URLVariables();                               
				params.sty = "ddgcd"; 
				params.id = dfdd.id; 
				httpservice.addEventListener(ResultEvent.RESULT,lodgcdianhandler);
				httpservice.send(params);
			}
			private function lodgcdianhandler(event:ResultEvent):void
			{
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
//				var jsonValues:Array = jsonObject["values"] as Array;
//				ddDataGrid.dataProvider=jsonValues;
				dianarray= jsonObject["values"] as Array;
				
			}
		
			private function addnew():void
			{
				dfbg=new Dfgc();
//				dianarray=new Array();
				newdiduanlist=new Array();
				bglist.visible=false;
				bgcontext.visible=true;
				showedit=true;
//				bgedit.visible=false;
				addstatus=4;
			
				
			}
			
			///关闭widget清空图层
			private function wTemplate_closedHandler(event:Event):void
			{
				graphicsLayer.clear();
				if(infoPupop!=null)
				{   
					if(iscolse)
					{
						this.map.removeChild(infoPupop);
						iscolse=false;
					}
				}
			}
			private function resoultData_doubleClickHandler(event:Event):void
			{
				more();
				selectitem=new Object();
				var grid:DataGrid = event.currentTarget as DataGrid;
				selectitem=grid.selectedItem;
				// TODO Auto-generated method stub
				
				var httpservice:HTTPService = new HTTPService;
				httpservice.url= servletcontext + "/dfgc/gccxServlet";
				httpservice.method = "POST";
				httpservice.resultFormat = "text";
				var params:URLVariables = new URLVariables();                               
				params.sty = "gcd"; 
				params.id = selectitem.id; 
				httpservice.addEventListener(ResultEvent.RESULT,lodgcdhandler);
				httpservice.send(params);
				
			}
			private function resoultData_ClickHandler(event:Event):void
			{   oneselectitem=new Object();
				var grid:DataGrid = event.currentTarget as DataGrid;
				oneselectitem=grid.selectedItem;
				// TODO Auto-generated method stub
				
				var httpservice:HTTPService = new HTTPService;
				httpservice.url= servletcontext + "/dfgc/gccxServlet";
				httpservice.method = "POST";
				httpservice.resultFormat = "text";
				var params:URLVariables = new URLVariables();                               
				params.sty = "gcd"; 
				params.id = oneselectitem.id; 
				httpservice.addEventListener(ResultEvent.RESULT,showgcdhandler);
				httpservice.send(params);
				
			}
			
			private function lodgcdhandler(event:ResultEvent):void
			{
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				var jsonValues:Array = jsonObject["values"] as Array;
				if(ddcl!=null)
				{
					PopUpManager.removePopUp(ddcl);
				}
				ddcl =PopUpManager.createPopUp(this.parentApplication.parent,DfgcDdcl,false) as DfgcDdcl;
				ddcl.servletContent = this.servletcontext;
				ddcl.progressid =selectitem;
				ddcl.gcid=selectitem.id;
				ddcl.showedit=false;	
				ddcl.map=map;
				ddcl.layerid=layerid;
				ddcl.rcDataGrid.addEventListener(MouseEvent.CLICK, datagridclick);
				ddcl.rcDataGrid.dataProvider=jsonValues;
				PopUpManager.centerPopUp(ddcl);
				
			}
			private function datagridclick(event:Event):void
			{
				var grid:DataGrid = event.currentTarget as DataGrid;
				var select:Object=grid.selectedItem;
				if(tbzh!=null)
				{
					var symbol:PictureMarkerSymbol=new PictureMarkerSymbol(ICON_URL + "icon_ar_tag.png",14,21,7,0);
					var selg:Graphic=graphicsLayer.getChildByName(tbzh) as Graphic;
					if(selg==null) return;
					selg.symbol=symbol;
					graphicsLayer.moveToTop(selg);  //图形置顶显示
					selg.refresh();
				}
				tbzh=select.tbzh;
				var symbol:PictureMarkerSymbol=new PictureMarkerSymbol(ICON_URL + "dot.png",22,33,7,0);
				var selgr:Graphic=graphicsLayer.getChildByName(tbzh) as Graphic;
				if(selgr==null) return;  
				selgr.symbol=symbol;
				graphicsLayer.moveToTop(selgr);  //图形置顶显示
				selgr.refresh();
				map.centerAt(selgr.geometry as MapPoint);
				if(infoPupop!=null)
				{    
					if(iscolse)
					{
						this.map.removeChild(infoPupop);
						iscolse=false;
					}
				}
				
			}
			private function showgcdhandler(event:ResultEvent):void
			{
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				var jsonValues:Array = jsonObject["values"] as Array;
				doquery(jsonValues);
			}
			private function progress():void
			{
				bglist.visible=true;
				bgcontext.visible=false;

			}
		
			
			private function doquery(jsonValues:Array):void
			{
				var queryTask:QueryTask = new QueryTask;
				queryTask.url = layerid;
				queryTask.addEventListener(QueryEvent.EXECUTE_COMPLETE,queryTaskHandler);
				queryTask.addEventListener(FaultEvent.FAULT,queryTaskErr)
				queryTask.useAMF = false;
				var query:Query = new Query;
				query.returnGeometry = true;
				var bhwhere:String;
//				var tb:ArrayCollection=ddDataGrid.dataProvider as ArrayCollection;
				if(jsonValues.length<1)
				{
					bhwhere="TBZH='不存在'";	
				}
				for(var i:int=0;i<jsonValues.length;i++)
				{
					
					if(i==0)
					{
						bhwhere="TBZH='"+jsonValues[i].tbzh +"'";
					}
					else
					{
						bhwhere=bhwhere+" or TBZH='"+jsonValues[i].tbzh +"'";
					}
				}
				
//				query.outFields = ["*"];
//			query.geometry = event.graphic.geometry;
				query.where=bhwhere;
				queryTask.execute(query);
			}
			private function queryTaskErr(event:FaultEvent ):void
			{
				Alert.show(event.fault.faultString);
			}
			private var sel:Graphic=null;
			private var infoPupop:DfgcInfoPopup=null;
			private var iscolse:Boolean=true;
			private var tbzh:String=null;
			private function click(event:MouseEvent):void
			{
				if(tbzh!=null)
				{
					var symbol:PictureMarkerSymbol=new PictureMarkerSymbol(ICON_URL + "icon_ar_tag.png",14,21,7,0);
					var selg:Graphic=graphicsLayer.getChildByName(tbzh) as Graphic;
					selg.symbol=symbol;
					selg.refresh();
				}
			  sel=event.currentTarget as Graphic;
			  tbzh=sel.attributes.TBZH;
			  var symbol1:PictureMarkerSymbol=new PictureMarkerSymbol(ICON_URL + "dot.png",22,33,7,0);
			  sel.symbol=symbol1;
			  sel.refresh();
			  var httpservice:HTTPService = new HTTPService;
			  httpservice.url= servletcontext + "/dfgc/gccxServlet";
			  httpservice.method = "POST";
			  httpservice.resultFormat = "text";
			  var params:URLVariables = new URLVariables();                               
			  params.sty = "thisgcz"; 
			  params.tbzh = tbzh; 
			  params.pid = oneselectitem.id; 
			  httpservice.addEventListener(ResultEvent.RESULT,thisgczhandler);
			  httpservice.send(params);	
			}
			private function thisgczhandler(event:ResultEvent):void
			{
				var jsonObject:Object = JSON.parse(event.result.toString()) as Object;
				var jsonValues:Array = jsonObject["values"] as Array;
				var obj:Object=new Object();
				obj.nf=jsonValues[0].thisnf as int;
				obj.yf=jsonValues[0].thisyf as int;
				obj.dh=jsonValues[0].dh as String;
				obj.servletcontext=servletcontext;
				obj.tbzh=jsonValues[0].tbzh as String;
				obj.gcz=jsonValues[0].thisgcz as String;
				obj.wyl=jsonValues[0].thiswyl as String;
				obj.ljwy=jsonValues[0].ljwyl as String;
				obj.point = sel.geometry as MapPoint;
				obj.symbol = sel.symbol;
				obj.geometry = sel.geometry;
				obj.icon = "assets/images/user_male.png";
				obj.link="";
				if(infoPupop!=null)
				{   
					if(iscolse)
					{
						this.map.removeChild(infoPupop);
						iscolse=false;
					}
				}
			     infoPupop= new DfgcInfoPopup;
				infoPupop.map = this.map;
//				infoPupop.name="PDA" + pdaResult.title;
				this.map.addChild(infoPupop);
				infoPupop.popcol.addEventListener(MouseEvent.CLICK, closeclick);
				infoPupop.infoData = obj;
				iscolse=true;
				
			}
			private function closeclick(event:MouseEvent):void
			{
				
				this.map.removeChild(infoPupop);
				iscolse=false;
			}
			
			private function getint(str:String):Number
			{
				try
				{
					var ii:Number=parseFloat(str);
					if(isNaN(ii))
					{
						ii=0;
					}
					return ii;
				}
				catch(e:Error)
				{
					return 0;
				}
				return 0;
			}
			private function queryTaskHandler(event:QueryEvent):void
			{    
				var geo:Polygon= new Polygon();;
				if(event.featureSet!=null && event.featureSet.features.length>0)
				{    graphicsLayer.clear(); 
					var pointArray:Array=new Array();
					for(var ii:int;ii<event.featureSet.features.length;ii++)
					{
				       var p:MapPoint=event.featureSet.features[ii].geometry as MapPoint;
					   var fe:Graphic=event.featureSet.features[ii];
					   var symbol:PictureMarkerSymbol=new PictureMarkerSymbol(ICON_URL + "icon_ar_tag.png",14,21,7,0);
//					   var symbol:SimpleMarkerSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,15,0xFF0000);
					
					   var g:Graphic=new Graphic(fe.geometry,symbol,fe.attributes);
					   g.name=fe.attributes.TBZH;
					   graphicsLayer.add(g);
					  
					   g.addEventListener(MouseEvent.CLICK, click);
//					   g.addEventListener(MouseEvent.DOUBLE_CLICK,doubleclick);
					   pointArray.push(p);
					}
					geo.addRing(pointArray);
					map.extent=new Extent(geo.extent.xmin-100,geo.extent.ymin-100,geo.extent.xmax+100,geo.extent.ymax+100);
					
				}
				

			}
			public function more():void
			{
				oneselectitem=new Object();
//				var grid:DataGrid = event.currentTarget as DataGrid;
				oneselectitem=rcDataGrid.selectedItem;
				// TODO Auto-generated method stub
				
				
				var httpservice:HTTPService = new HTTPService;
				httpservice.url= servletcontext + "/dfgc/gccxServlet";
				httpservice.method = "POST";
				httpservice.resultFormat = "text";
				var params:URLVariables = new URLVariables();                               
				params.sty = "gcd"; 
				params.id = oneselectitem.id; 
				httpservice.addEventListener(ResultEvent.RESULT,showgcdhandler);
				httpservice.send(params);
			}
		]]>
	</fx:Script>
	           
	<viewer:WidgetTemplate id="wTemplate"
						   width="400" height="400" closed="wTemplate_closedHandler(event)">
		
		<s:HGroup id="main"
				  width="100%" height="100%"
				  visible="false"
				  visible.main="true" horizontalAlign="center">
			<mx:Tile width="100%" height="100%" horizontalGap="1">
				<mx:Repeater id="fRepeater" dataProvider="{moduleAC}">
					<components:WidgetButtonControl infoData="{fRepeater.currentItem}" click="clickMoudel(event)">
						
					</components:WidgetButtonControl>
				</mx:Repeater>
			</mx:Tile>
		</s:HGroup>
	<s:Group id="gcbg"
			 width="100%" height="100%"
			 visible="false"
			 visible.gcbg="true">
		<s:VGroup width="100%"  height="100%" top="10"  id="bglist"  visible="true">
			
			<s:Scroller width="100%" height="100%" top="20" >
				<Dfgc:DfgcDataGroup id="GcbdDG"
									  DfgcClick="showgcbg(event)"
									  DfgcDelete="removegcbg(event)"
									  dataProvider="{GcbgAL}">
					<Dfgc:layout>
						<s:VerticalLayout gap="2"
										  horizontalAlign="justify"
										  useVirtualLayout="true"/>
					</Dfgc:layout>
				</Dfgc:DfgcDataGroup>
			</s:Scroller>	
		</s:VGroup>
		<s:VGroup width="100%"  height="100%"   id="bgcontext"  visible="false">
			<s:HGroup width="100%" verticalAlign="middle" height="30">
			<s:Button left="30" label="返回" click="progress()"/>
			
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle" height="25" top="30">
				<s:Label text="报告名称" left="20"/> 
				<s:TextInput id="bgmc" width="280"  text="{dfbg.name}" editable="{showedit}"/>
				<s:Label text="第" left="10"/> 
				<s:TextInput id="times" width="20"  text="{dfbg.times}" editable="{showedit}"/>
				<s:Label text="次" left="10"/> 
				
			</s:HGroup>
				
			<s:VGroup width="100%" height="25"  top="55" >
				<s:HGroup width="100%" verticalAlign="middle" height="25">
				<s:Label text="编    号" left="20"/> 
				<s:TextInput id="bh" width="150"  text="{dfbg.bgbh}" editable="{showedit}"/>
					<s:Label text="时  间" left="20" width="40"/> 
					<s:TextInput id="nf" width="50"  text="{dfbg.years}" editable="{showedit}"/>
					<s:Label text="年" left="20" /> 
					<s:TextInput id="yf" width="50"  text="{dfbg.gcyf}" editable="{showedit}"/>
					<s:Label text="月" left="20" /> 
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle" height="25"  visible="false">
					<s:Label text="工程名称" left="20"/> 
					<s:TextInput id="gcmc" width="100%"  text="{dfbg.gcmc}" editable="{showedit}"/>
				</s:HGroup>	
				<s:HGroup width="100%" verticalAlign="middle" height="25"  visible="false">
					<s:Label text="工程地点" left="20"/> 
					<s:TextInput id="gcdd" width="100%"  text="{dfbg.gcdd}" editable="{showedit}"/>
				</s:HGroup>	
			</s:VGroup>
			<s:HGroup width="100%" verticalAlign="middle" height="25">
				<s:Label text="重点堤段:" left="20"/> 
				
			</s:HGroup>	
				
					<mx:DataGrid id="rcDataGrid" width="100%" height="100%" alternatingItemColors="[#FFFFFF,#DFF0F8]" doubleClickEnabled="true"  doubleClick="resoultData_doubleClickHandler(event)" x.main="0" y.main="10" dataProvider="{newdiduanlist}">
						<mx:columns>
							
							<mx:DataGridColumn headerText="堤段名称" dataField="gcmc" />
								<mx:DataGridColumn headerText="操作" width="75">
								<mx:itemRenderer>
									<fx:Component>
										
                                       <mx:HBox  horizontalAlign="center">
										<s:Button label="定位" click="this.outerDocument.more()" />
									   </mx:HBox>
									</fx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
							
							
							
						</mx:columns>
					</mx:DataGrid>
		
			
		</s:VGroup>
	</s:Group>
		
	</viewer:WidgetTemplate>
</viewer:BaseWidget>
